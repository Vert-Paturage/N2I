
const config = {
    type: Phaser.AUTO,
    width: 800,
    height: 600,
    backgroundColor: '#87CEEB',  
    scene: {
        preload: preload,
        create: create,
        update: update
    }
};

let boat;
let trash;
let score = 0;
let scoreText;
let timer = 30;  
let timerText;
let gameOver = false;  
let gameOverText;
let educationalText; 

const game = new Phaser.Game(config);

function preload() {
    
}

function create() {
    boat = this.physics.add.rectangle(400, 500, 100, 50, 0xff0000); 
    boat.setCollideWorldBounds(true);

  
    trash = this.physics.add.group({
        key: 'trash',
        repeat: 4,
        setXY: { x: Phaser.Math.Between(100, 700), y: 0, stepX: 150 }
    });

   
    trash.children.iterate(function (child) {
        child.setDisplaySize(50, 50); 
        child.setFill(0x00ff00); 
    });

   
    this.input.on('pointermove', function (pointer) {
        if (!gameOver) {
            boat.x += (pointer.x - boat.x) * 0.1; 
        }
    });

   
    this.physics.add.collider(boat, trash, gameOverFunction, null, this);

  
    scoreText = this.add.text(16, 16, 'Score: 0', {
        fontSize: '32px',
        fill: '#fff'
    });

   
    timerText = this.add.text(650, 16, 'Time: 30', {
        fontSize: '32px',
        fill: '#000000'  
    });

  
    this.time.addEvent({
        delay: 1000, 
        callback: updateTimer,
        callbackScope: this,
        loop: true
    });
}

function update() {
    if (gameOver) {
        return;  
    }

    
    trash.children.iterate(function (child) {
        child.y += 2;
        if (child.y > 600) {
            child.y = 0;
            child.x = Phaser.Math.Between(100, 700);
        }
    });
}

function collectTrash(boat, trashItem) {
    if (gameOver) return; 
   
    trashItem.y = 0;
    trashItem.x = Phaser.Math.Between(100, 700);
    score += 10; 
    scoreText.setText('Score: ' + score);
}

function gameOverFunction(boat, trashItem) {
    
    gameOver = true; 
  
    gameOverText = this.add.text(400, 300, 'Game Over', {
        fontSize: '64px',
        fill: '#ff0000'
    }).setOrigin(0.5); 
    
    
    showEducationalMessage(this);
}

function updateTimer() {
    if (gameOver) return; 
    timer--; 
    timerText.setText('Time: ' + timer);

    if (timer <= 0) {
        gameOver = true;  
        gameOverText = this.add.text(400, 300, 'Game Over', {
            fontSize: '64px',
            fill: '#ff0000'
        }).setOrigin(0.5); 

       
        showEducationalMessage(this);
    }
}

function showEducationalMessage(scene) {
    const educationalMessage = [
        "Mission accomplie, les mangroves sont purifiÃ©es ! ðŸŒ¿ðŸ’§",
        "Les mangroves, comme votre foie, jouent un rÃ´le vital de filtration.",
        "Elles Ã©liminent les impuretÃ©s et protÃ¨gent les Ã©cosystÃ¨mes environnants,",
        "tout comme votre foie nettoie votre sang pour garder votre corps en bonne santÃ©.",
        "",
        "Mangroves et foie : un duo purificateur",
        "Votre foie filtre les toxines pour empÃªcher leur accumulation dans votre organisme.",
        "De mÃªme, les mangroves absorbent les polluants et stabilisent les sols,",
        "prÃ©servant ainsi la qualitÃ© de lâ€™eau et la vie marine. Si elles sont surchargÃ©es",
        "par des dÃ©chets, leur Â« fonction purificatrice Â» sâ€™effondre, mettant en pÃ©ril lâ€™Ã©cosystÃ¨me.",
        "",
        "Les menaces pour les mangroves",
        "â€¢ DÃ©chets plastiques : empÃªchent les racines de respirer et de filtrer lâ€™eau.",
        "â€¢ Produits chimiques : empoisonnent les sols et les organismes qui en dÃ©pendent.",
        "â€¢ DÃ©forestation : dÃ©truit leur capacitÃ© naturelle Ã  protÃ©ger les cÃ´tes et filtrer lâ€™eau.",
        "",
        "Pourquoi prÃ©server les mangroves ?",
        "Elles agissent comme un Â« foie de la planÃ¨te Â» :",
        "â€¢ Purifient lâ€™eau des polluants.",
        "â€¢ ProtÃ¨gent les cÃ´tes contre les tempÃªtes et lâ€™Ã©rosion.",
        "â€¢ Abritent une biodiversitÃ© essentielle et capturent de grandes quantitÃ©s de COâ‚‚."
    ];

    let textY = 350; 
    educationalMessage.forEach((line, index) => {
        scene.add.text(400, textY + (index * 30), line, {
            fontSize: '20px',
            fill: '#000000',
            align: 'center'
        }).setOrigin(0.5); 
    });
}
